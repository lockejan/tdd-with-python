---
- hosts: all
  become: true
  vars_prompt:
    - name: email_host
      prompt: What is your mailserver uri?
      private: no
      default: "mail.example.com"
    - name: email_user
      prompt: Which is the targeted mail account?
      private: no
      default: "superlists@example.com"
    - name: email_password
      prompt: What is the mail-accounts password?
      default: "foo-bar-baz"

  vars:
    host: "local.todo.smittie.de"
    sitename: "todo.smittie.de"
    repo_url: "git@github.com:lockejan/tdd-with-python.git"
    no_debug: "y"

  tasks:

    - name: make sure required packages are installed
      apt:
        name:
          - nginx
          - git
          - python3
          - python3-pip
          - python3-venv
        state: present
        update_cache: yes
        cache_valid_time: 3600
      become_user: root

    - name: update or clone project source
      git:
        repo: "{{ repo_url }}"
        version: master
        dest: "{{ ansible_env.HOME }}/sites/{{ sitename }}"
        accept_hostkey: yes
        clone: yes
        force: yes
      become: false

    - name: create random but idempotent password
      set_fact:
        password: "{{ lookup('password', '/dev/null', seed=inventory_hostname) }}"

    - name: create env file
      template:
        src: env.j2
        dest: "{{ ansible_env.HOME }}/sites/{{ host }}/.env"

    - name: append mail setup to env file
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/sites/{{ host }}/.env"
        line: "{{item.name}}={{item.value}}"
      loop:
        - { name: 'EMAIL_HOST', value: "{{ email_host }}" }
        - { name: 'EMAIL_HOST_USER', value: "{{ email_user }}" }
        - { name: 'EMAIL_HOST_PASSWORD', value: "{{ email_password }}" }

    - name: ensure venv exists and install dependencies into it
      pip:
        chdir: "{{ ansible_env.HOME }}/sites/{{ host }}"
        requirements: requirements.txt
        virtualenv: venv
        virtualenv_command: "python3 -m venv"

    - name: apply django migrations
      command: ./venv/bin/python3 manage.py migrate --noinput
      args:
        chdir: "{{ ansible_env.HOME }}/sites/{{ host }}"
      # become: false

    - name: gather static files to served
      command: ./venv/bin/python3  manage.py collectstatic --noinput
      args:
        chdir: "{{ ansible_env.HOME }}/sites/{{ host }}"
      # become: false

    - name: allow long hostnames in nginx
      lineinfile:
        dest: /etc/nginx/nginx.conf
        regexp: '(\s+)#? ?server_names_hash_bucket_size'
        backrefs: yes
        line: '\1server_names_hash_bucket_size 64;'

    - name: add nginx config to sites-available
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ host }}
      notify:
        - restart nginx
      become_user: root

    - name: disable nginx default site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - restart nginx
      become_user: root

    - name: add symlink in nginx sites-enabled
      file:
        src: /etc/nginx/sites-available/{{ host }}.conf
        dest: /etc/nginx/sites-enabled/{{ host }}
        state: link
      notify:
        - restart nginx
      become_user: root

    - name: write gunicorn service script
      template:
        src: gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn-{{ host }}.service
      notify:
        - restart gunicorn
      become_user: root

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become_user: root

    - name: restart gunicorn
      systemd:
        name: gunicorn-{{ host }}
        daemon_reload: yes
        enabled: yes
        state: restarted
      become_user: root
